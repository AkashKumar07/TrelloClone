{"version":3,"sources":["TrelloList/TrelloList.module.css","App.module.css","TrelloActionButton/TrelloActionButton.module.css","Card/Card.module.css","Store/Reducers/Reducer.js","Store/Actions/ActionTypes.js","Card/Card.js","Store/Actions/ListActions.js","TrelloActionButton/TrelloActionButton.js","TrelloList/TrelloList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","listId","cardId","initialState","title","id","cards","text","Reducer","state","action","type","newList","payload","newCard","newState","map","list","droppableIdStart","droppableIdEnd","droppableIndexStart","droppableIndexEnd","splice","find","card","listStart","listEnd","newDeletedCardsList","filter","lists","Card","props","dispatch","useDispatch","draggableId","String","index","provided","ref","innerRef","draggableProps","dragHandleProps","className","classes","style","display","flexDirection","justifyContent","content","onClick","TrelloActionButton","useState","formOpen","setFormOpen","value","setValue","toggleFormOpen","toggle","buttonText","buttonTextOpacity","buttonTextColor","buttonTextBackground","AddButton","opacity","color","backgroundColor","paddingLeft","width","cursor","height","alignItems","fontSize","margin","placeholder","buttonTitle","RenderForm","minHeight","autoFocus","onBlur","onChange","event","target","resize","outline","border","onMouseDown","Fragment","TrelloList","cardsHeight","setCardsHeight","data","cardsStyle","toggleCardsHeight","push","droppableId","droppableProps","console","log","join","key","App","useSelector","onDragEnd","result","destination","source","sort","textAlign","direction","item","Boolean","window","location","hostname","match","composeEnhancers","compose","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0ea2d1f5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"TrelloList_card__vsHy9\",\"cardsDisplay\":\"TrelloList_cardsDisplay__3hWB7\",\"createCard\":\"TrelloList_createCard__11OpQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1uZfD\",\"home\":\"App_home__29bxK\",\"wrapper\":\"App_wrapper__2GCVq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"TrelloActionButton_card__u_MbO\",\"Button\":\"TrelloActionButton_Button__1PYG2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__rEv4x\"};","import * as ActionTypes from '../Actions/ActionTypes';\r\n\r\nlet listId = 2;\r\nlet cardId = 6;\r\nconst initialState = [\r\n    {\r\n    title: 'today',\r\n    id: `list-${0}`,\r\n    cards: [\r\n        {\r\n            id: `card-${0}`,\r\n            text: 'wake up',\r\n\r\n        },\r\n        {\r\n            id: `card-${1}`,\r\n            text: 'have breakfast'\r\n        }\r\n    ]\r\n    },\r\n    {\r\n        title: 'learning',\r\n        id: `list-${1}`,\r\n        cards: [\r\n            {\r\n                id: `card-${2}`,\r\n                text: 'html',\r\n    \r\n            },\r\n            {\r\n                id: `card-${3}`,\r\n                text: 'css'\r\n            },\r\n            {\r\n                id: `card-${4}`,\r\n                text: 'javascript',\r\n    \r\n            },\r\n            {\r\n                id: `card-${5}`,\r\n                text: 'react'\r\n            }\r\n        ]\r\n        }\r\n]\r\n\r\nconst Reducer = (state=initialState, action) => {\r\n    switch(action.type){ \r\n        case ActionTypes.ADD_LIST:\r\n            const newList= {\r\n                title: action.payload.title,\r\n                id: `list-${listId}`,\r\n                cards: []\r\n            }\r\n            listId=listId + 1;\r\n            return [...state, newList]\r\n        case ActionTypes.ADD_CARD:{\r\n            const newCard = {\r\n                id: `card-${cardId}`,\r\n                text: action.payload.text\r\n            }\r\n            cardId = cardId + 1;\r\n            const newState = state.map((list)=>{\r\n                if(list.id === action.payload.id){\r\n                    return(\r\n                        {\r\n                            ...list,\r\n                            cards: [...list.cards, newCard]\r\n                        }\r\n                    )\r\n                }else{\r\n                    return(list);\r\n                }\r\n            })\r\n            return newState;\r\n        }\r\n\r\n        case ActionTypes.DRAG_HAPPENED: \r\n            const {\r\n                droppableIdStart,\r\n                droppableIdEnd,\r\n                droppableIndexStart,\r\n                droppableIndexEnd,\r\n                type\r\n            } = action.payload;\r\n            const newState = [...state];\r\n\r\n            //dragging lists around\r\n            if(type === 'list'){\r\n                const list = newState.splice(droppableIndexStart,1);\r\n                newState.splice(droppableIndexEnd, 0, ...list);\r\n                return newState;\r\n            }\r\n\r\n            //in the same list\r\n            if(droppableIdStart === droppableIdEnd){\r\n                const list = state.find((list) => droppableIdStart === list.id);\r\n                const card = list.cards.splice(droppableIndexStart, 1);\r\n                list.cards.splice(droppableIndexEnd, 0 , ...card);\r\n            }\r\n\r\n            if(droppableIdStart !== droppableIdEnd) {\r\n                //find where the drag happened\r\n                const listStart = state.find((list) => droppableIdStart === list.id);\r\n                //pull out the card from the list\r\n                const card = listStart.cards.splice(droppableIndexStart, 1);\r\n                //find where the drop happened\r\n                const listEnd = state.find((list) => droppableIdEnd === list.id);\r\n                //put the card in the list\r\n                listEnd.cards.splice(droppableIndexEnd, 0, ...card);\r\n            }\r\n            return newState;\r\n        case ActionTypes.DELETE_CARD: {\r\n            const {listId, cardId}=action.payload;\r\n            const newState = [...state];\r\n            const list = state.find((list)=> (\r\n                list.id===listId\r\n            ))\r\n            const newDeletedCardsList = list.cards.filter((card)=> card.id!==cardId);\r\n            list.cards=newDeletedCardsList;\r\n            return newState\r\n        }\r\n        case ActionTypes.DELETE_LIST: {\r\n            const {listId} = action.payload;\r\n            const lists = state.filter((list)=> list.id!==listId);\r\n            const newState = lists;\r\n            return newState   \r\n        }\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default Reducer;","export const ADD_LIST = 'ADD_LIST';\r\nexport const ADD_CARD = 'ADD_CARD';\r\nexport const DRAG_HAPPENED = 'DRAG_HAPPENED';\r\nexport const DELETE_CARD = 'DELETE_CARD';\r\nexport const DELETE_LIST = 'DELETE_LIST'","import React from 'react';\r\nimport {useDispatch} from 'react-redux';\r\nimport {Draggable} from 'react-beautiful-dnd';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\n\r\nimport {deleteCard} from '../Store/Actions/ListActions';\r\nimport * as classes from './Card.module.css';\r\n\r\nconst Card = (props) => {\r\n    const dispatch = useDispatch();\r\n    return(\r\n        <Draggable draggableId={String(props.id)} index={props.index}>\r\n            {(provided) => (\r\n                <div ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps} className={classes.card}>\r\n                    <div style={{\r\n                        display: 'flex',\r\n                        flexDirection: 'row',\r\n                        justifyContent: 'space-between'\r\n                    }}>\r\n                    <p>{props.content}</p>\r\n                    <div onClick={() => dispatch(deleteCard(props.listId,props.id))} style={{}}>\r\n                    < DeleteOutlineIcon/>\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </Draggable>\r\n    )\r\n}\r\n\r\nexport default Card;","import * as actionTypes from './ActionTypes';\r\n\r\nexport const AddList = (title) =>{\r\n    return(\r\n        {\r\n        type: actionTypes.ADD_LIST,\r\n        payload: {\r\n            title: title\r\n        }\r\n    }\r\n    )\r\n}\r\n\r\nexport const AddCard = (listId, text) =>{\r\n    return(\r\n        {\r\n            type :actionTypes.ADD_CARD,\r\n            payload: { \r\n                id: listId,\r\n                text: text\r\n            }\r\n        }\r\n    )\r\n}\r\n\r\nexport const sort = (\r\n    droppableIdStart,\r\n    droppableIdEnd,\r\n    droppableIndexStart,\r\n    droppableIndexEnd,\r\n    draggableId,\r\n    type\r\n) => {\r\n    return (\r\n        {\r\n            type: actionTypes.DRAG_HAPPENED,\r\n            payload: {\r\n                droppableIdStart,\r\n                droppableIdEnd,\r\n                droppableIndexStart,\r\n                droppableIndexEnd,\r\n                draggableId,\r\n                type\r\n            }\r\n        }\r\n    )\r\n}\r\n\r\nexport const deleteCard = (listId, cardId) =>{\r\n    return(\r\n        {\r\n            type: actionTypes.DELETE_CARD,\r\n            payload: {\r\n                listId,\r\n                cardId\r\n            }\r\n        }\r\n    )\r\n}\r\n\r\nexport const deleteList = (listId) => {\r\n    console.log('delete list');\r\n    return(\r\n        {\r\n            type: actionTypes.DELETE_LIST,\r\n            payload: {\r\n                listId\r\n            }\r\n        }\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport {useDispatch} from 'react-redux';\r\n\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport TextArea from 'react-textarea-autosize';\r\nimport {AddList, AddCard} from '../Store/Actions/ListActions';\r\n\r\nimport * as classes from './TrelloActionButton.module.css';\r\n\r\nconst TrelloActionButton = (props) => {\r\n    const [formOpen, setFormOpen] = useState(false);\r\n    const [value, setValue] = useState();\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const toggleFormOpen = () => {\r\n        setFormOpen(!formOpen);\r\n        if(!props.list){\r\n            (() => props.toggle())();\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (event) => {\r\n        setValue(event.target.value);\r\n    }\r\n\r\n    const handleAddList = () => {\r\n        if(value){\r\n            dispatch(AddList(value));\r\n        }\r\n        setValue();\r\n        return;\r\n    }\r\n\r\n    const handleAddCard = (id) => {\r\n        if(value){\r\n            dispatch(AddCard(id,value));\r\n        }\r\n        setValue()\r\n        return;\r\n    }\r\n\r\n    const buttonText = props.list ? 'Add another list' : 'Add another card';\r\n    const buttonTextOpacity = props.list ? 1 : 0.5;\r\n    const buttonTextColor = props.list ? 'white' : 'inherit';\r\n    const buttonTextBackground = props.list ? 'rgba(0,0,0,0.15)' : \"inherit\";\r\n\r\n    const AddButton = <div onClick={toggleFormOpen} style={{\r\n                            display: 'flex',\r\n                            flexDirection: 'row',\r\n                            opacity: buttonTextOpacity,\r\n                            color: buttonTextColor,\r\n                            backgroundColor: buttonTextBackground,\r\n                            paddingLeft : '10px',\r\n                            width: '240px',\r\n                            cursor: 'pointer',\r\n                            height: '35px'\r\n                        }}>\r\n                            <div style={{\r\n                                display: 'flex',\r\n                                justifyContent : 'center',\r\n                                alignItems : 'center'\r\n                            }}>\r\n                            <AddIcon fontSize=\"small\" />\r\n                            </div>\r\n                            <div style={{\r\n                                display: 'flex',\r\n                                justifyContent: \"center\",\r\n                                alignItems: 'center'\r\n                            }}>\r\n                            <p style={{margin: 0, width: '220px'}}>{buttonText}</p>\r\n                            </div>\r\n                        </div>\r\n\r\n    const placeholder = props.list ? 'Add list' : 'Enter the title for your card';\r\n    const buttonTitle = props.list ? 'Add List' : 'Add Card';\r\n\r\n    const RenderForm =  <div >\r\n                            <div className={classes.card} style={{minHeight: '85px'}}>\r\n                                <TextArea placeholder={placeholder} autoFocus\r\n                                onBlur={toggleFormOpen}\r\n                                value={value}\r\n                                onChange={onChangeHandler}\r\n                                style={{\r\n                                    resize: 'none',\r\n                                    width: '100%',\r\n                                    outline: 'none',\r\n                                    border: 'none'\r\n                                }}/>\r\n                            </div>\r\n                            <div style={{\r\n                                display: 'flex',\r\n                                flexDirection: 'row'\r\n                            }}>\r\n                                <button onMouseDown={props.list ? handleAddList : () => handleAddCard(props.id)} className={classes.Button}>{buttonTitle}</button>\r\n                                <div style={{\r\n                                    display: 'flex',\r\n                                    flexDirection : 'center',\r\n                                    alignItems : 'center'\r\n                                }}>\r\n                                <CloseIcon />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n    \r\n    return(\r\n        <React.Fragment>\r\n        {formOpen ? RenderForm : AddButton}\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default TrelloActionButton;","import React,{useState} from 'react';\r\nimport {useDispatch} from 'react-redux';\r\nimport {Droppable, Draggable} from 'react-beautiful-dnd';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport * as classes from './TrelloList.module.css';\r\nimport Card from '../Card/Card';\r\nimport TrelloActionButton from '../TrelloActionButton/TrelloActionButton';\r\nimport {deleteList} from '../Store/Actions/ListActions';\r\n\r\nconst TrelloList  = (props) => {\r\n    const [cardsHeight, setCardsHeight] = useState(false);\r\n    const dispatch = useDispatch();\r\n    const data = props.list\r\n\r\n    const cardsStyle = [classes.cardsDisplay]\r\n\r\n    const toggleCardsHeight = () => {\r\n        setCardsHeight(!cardsHeight);\r\n    }\r\n\r\n    if(cardsHeight){\r\n        cardsStyle.push(classes.createCard)\r\n    }\r\n\r\n    return(\r\n        <Draggable draggableId={String(data.id)} index={props.index}>\r\n            {(provided) => (\r\n                <div {...provided.draggableProps} ref={provided.innerRef}\r\n                {...provided.dragHandleProps} className={classes.card}>\r\n                <Droppable droppableId = {String(data.id)}>\r\n                    {(provided) => (\r\n                        <div {...provided.droppableProps} ref={provided.innerRef}>\r\n                            <div style={{\r\n                                display: 'flex',\r\n                                flexDirection: 'row',\r\n                                justifyContent: 'space-between'\r\n                            }}>\r\n                            <h4>{data.title}</h4>\r\n                            <div onClick={() => dispatch(deleteList(props.listId))}>\r\n                            <CloseIcon/>\r\n                            </div>\r\n                            </div>\r\n                            <div className={cardsStyle.join(\" \")}>\r\n                            {data.cards.map((card, index)=> \r\n                                <Card key={card.id} content={card.text} listId={data.id} id={card.id} index={index}/>\r\n                            )}\r\n                            {provided.placeholder}\r\n                            </div>\r\n                            <div >\r\n                            <TrelloActionButton toggle={toggleCardsHeight} id={data.id}/>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </Droppable>\r\n                </div>\r\n            )}\r\n        </Draggable>\r\n        \r\n    )\r\n}\r\n\r\nexport default TrelloList;","import React from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport {DragDropContext, Droppable} from 'react-beautiful-dnd';\r\n\r\nimport * as classes from  './App.module.css';\r\nimport List from './TrelloList/TrelloList';\r\nimport TrelloActionButton from './TrelloActionButton/TrelloActionButton';\r\nimport {sort} from './Store/Actions/ListActions';\r\n\r\nfunction App() {\r\n\r\n  const list = useSelector((state) => state);\r\n  const dispatch = useDispatch();\r\n\r\n  const onDragEnd = (result) => {\r\n    //Reordering logic\r\n\r\n    const {destination, source, draggableId, type}= result;\r\n    if(!destination){\r\n      return;\r\n    }\r\n\r\n    dispatch(sort(\r\n      source.droppableId,\r\n      destination.droppableId,\r\n      source.index,\r\n      destination.index,\r\n      draggableId,\r\n      type\r\n    ))\r\n\r\n  }\r\n\r\n  return (\r\n    <DragDropContext onDragEnd={onDragEnd}>\r\n    <div>\r\n      <h1 style={{textAlign:'center', margin: 0}}>Trello Clone</h1>\r\n      <div className={classes.wrapper}>\r\n      <Droppable droppableId='all-lists' direction='horizontal' type='list'>\r\n          {(provided)=> (\r\n              <div {...provided.droppableProps} ref={provided.innerRef} className={classes.home}>\r\n              {list.map((item, index) => \r\n                <List key={item.id} list={item} listId={item.id} index={index}/>\r\n              )}\r\n              {provided.placeholder}\r\n              <TrelloActionButton list />\r\n            </div>\r\n          )}\r\n      </Droppable>\r\n      </div>\r\n    </div>\r\n    </DragDropContext>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, compose} from 'redux';\r\n\r\nimport Reducer from './Store/Reducers/Reducer';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst composeEnhancers = process.env.NODE_ENV === 'development' ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : null || compose;\r\n\r\nconst store = createStore(Reducer, composeEnhancers());\r\n\r\nReactDOM.render(\r\n  <Provider store={store} >\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}